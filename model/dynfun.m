    function [f, dfdx, dfdxdot, dfdu,L , dLdq] = dynfun(x, xdot, u)%dLdx (x2 to 6 which are the angles) dLdq 1 by 5 matrix
    % the 13 dynamics equations of the system, in the form
    %   f(x, dx/dt, u) = 0
    % where x contains the 13 state variables and u are the 5 torques
    % p contains the 5 model parameters
    
    global model 
    
	% copy parameter values into variables with meaningful
    c =  model.parameters.C;
	m =  model.parameters.m ;
    K =  model.parameters.K;      % shock cord stiffness
    L0 = model.parameters.L0;     % the wrist-sprocket distance when shock cord has zero force
    Kcrm = model.parameters.Kcrm; % chain rachet mechanism stiffness

    f = zeros(13,1);
    
    dfdx = spalloc(13,13,75);
    dfdxdot = spalloc(13,13,32);
    dfdu = spalloc(13,5,5);
    
    % x = [x_fw, q1 ...q5, v_fw, qd1...qd5, F]
    % velocities are derivative of positions (2:01:00 recording 4)
    f(1:6) = xdot(1:6) - x(7:12); %velocities
    dfdx(1:6, 7:12)   = -speye(6);
    dfdxdot(1:6, 1:6) = speye(6);
    
    % human dynamics
    q = x(2:6);     % the five coordinates of the human model
    qd = x(8:12);
    qdd = xdot(8:12);   
    % rowerdynamics function generated by Autolev computes 5 torques
    % using inverse dynamics and also 1 cable force using the 
    % cable ratchet mechanism model (z is a 6x1 output)
    % 13 equations to model the dynamics. The
    % first 6 (multibody dynamics and cable force)
    [z, dz_dq, dz_dqd, dz_dqdd, dz_dFc] = rowerdynamics(q,qd,qdd,x(13),model.parameters);% inverse dynamics so gives us the z(torques) 
    % z has 6 elements, the first 5s are the torques, the 6th one is the
    % wrist to sprocket distance, which depends on the q which is x(2:6) and

    %that we need to produce this motion with that force being applied to the
    %wrist and then we compare those torques (motion trajectory) to the torques that we have in
    %our trajectory (torque trajectory) and they have to be equal.
    

    f(8:12) = z(1:5) - u;  % f is in Nm 
    dfdx(8:12, 2:6)  = dz_dq(1:5,1:5);
    dfdx(8:12, 8:12) = dz_dqd(1:5,1:5);
    dfdx(8:12, 13)    = dz_dFc(1:5);
    dfdxdot(8:12, 8:12) = dz_dqdd(1:5,1:5);
    dfdu(8:12, :) = -speye(5);
    
    % flywheel dynamics, flywheel sees cable force, minus the shock cord
    % force
    L = z(6);
    dLdq = dz_dq(6,:);
    
    % dynamics of the flywheel
    % m*a - Fdamping - Fcrm = 0
    % or m*a - Fdamping - (Ftotal - Fshockcord) = 0
    f(7) = m * xdot(7) + c*x(7)*abs(x(7)) - (x(13) - K*(L-L0)); % x(7):velocity of the flyhweel ==> xdot(7): acceleration of the flywheel, m*xdot(7)--> intertia, c*x(7)^2--> damping, x(13): amount of flywheel motion
    dfdx(7,7) = 2*c*abs(x(7));
    dfdx(7,13) = -1;
    dfdxdot(7,7) = m;
    dfdx(7, 2:6) = K*dLdq;

    %cable force must be equal to cable ratchet force + shock cord force
    %use epsilon for non-linear spring to remove the non-linearity in the
    %derivatives
    epsilon = 0.000001;
    Fsc= Kcrm * (L - x(1) );
    Fcrm = (Fsc + sqrt(Fsc^2+epsilon^2))/2  ;
    dFcrmdFsc = (1+Fsc/sqrt(Fsc^2+epsilon^2))/2; 
    f(13) = x(13) - Fcrm - K*(L - L0);
    dfdx(13,13) = 1;
    dfdx(13,1) = Kcrm*dFcrmdFsc;
    dfdx(13,2:6) = -(dFcrmdFsc*Kcrm + K)*dLdq;
    
end